"""autogenerated by genpy from upperbodycore_msgs/users.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import upperbodycore_msgs.msg

class users(genpy.Message):
  _md5sum = "7a00c3d88998fc0bf609372f1044891e"
  _type = "upperbodycore_msgs/users"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 count
user[] users
int32 z
int32 x
int32 tracked


================================================================================
MSG: upperbodycore_msgs/user
joint Head
joint Torso
joint RightHand
joint LeftHand
joint LeftFoot
joint RightFoot
int32 id

================================================================================
MSG: upperbodycore_msgs/joint
int32 x
int32 y
int32 z
int32 img_x
int32 img_y
int32 mode

"""
  __slots__ = ['count','users','z','x','tracked']
  _slot_types = ['int32','upperbodycore_msgs/user[]','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       count,users,z,x,tracked

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(users, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.count is None:
        self.count = 0
      if self.users is None:
        self.users = []
      if self.z is None:
        self.z = 0
      if self.x is None:
        self.x = 0
      if self.tracked is None:
        self.tracked = 0
    else:
      self.count = 0
      self.users = []
      self.z = 0
      self.x = 0
      self.tracked = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.count))
      length = len(self.users)
      buff.write(_struct_I.pack(length))
      for val1 in self.users:
        _v1 = val1.Head
        _x = _v1
        buff.write(_struct_6i.pack(_x.x, _x.y, _x.z, _x.img_x, _x.img_y, _x.mode))
        _v2 = val1.Torso
        _x = _v2
        buff.write(_struct_6i.pack(_x.x, _x.y, _x.z, _x.img_x, _x.img_y, _x.mode))
        _v3 = val1.RightHand
        _x = _v3
        buff.write(_struct_6i.pack(_x.x, _x.y, _x.z, _x.img_x, _x.img_y, _x.mode))
        _v4 = val1.LeftHand
        _x = _v4
        buff.write(_struct_6i.pack(_x.x, _x.y, _x.z, _x.img_x, _x.img_y, _x.mode))
        _v5 = val1.LeftFoot
        _x = _v5
        buff.write(_struct_6i.pack(_x.x, _x.y, _x.z, _x.img_x, _x.img_y, _x.mode))
        _v6 = val1.RightFoot
        _x = _v6
        buff.write(_struct_6i.pack(_x.x, _x.y, _x.z, _x.img_x, _x.img_y, _x.mode))
        buff.write(_struct_i.pack(val1.id))
      _x = self
      buff.write(_struct_3i.pack(_x.z, _x.x, _x.tracked))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.users is None:
        self.users = None
      end = 0
      start = end
      end += 4
      (self.count,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.users = []
      for i in range(0, length):
        val1 = upperbodycore_msgs.msg.user()
        _v7 = val1.Head
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z, _x.img_x, _x.img_y, _x.mode,) = _struct_6i.unpack(str[start:end])
        _v8 = val1.Torso
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.z, _x.img_x, _x.img_y, _x.mode,) = _struct_6i.unpack(str[start:end])
        _v9 = val1.RightHand
        _x = _v9
        start = end
        end += 24
        (_x.x, _x.y, _x.z, _x.img_x, _x.img_y, _x.mode,) = _struct_6i.unpack(str[start:end])
        _v10 = val1.LeftHand
        _x = _v10
        start = end
        end += 24
        (_x.x, _x.y, _x.z, _x.img_x, _x.img_y, _x.mode,) = _struct_6i.unpack(str[start:end])
        _v11 = val1.LeftFoot
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z, _x.img_x, _x.img_y, _x.mode,) = _struct_6i.unpack(str[start:end])
        _v12 = val1.RightFoot
        _x = _v12
        start = end
        end += 24
        (_x.x, _x.y, _x.z, _x.img_x, _x.img_y, _x.mode,) = _struct_6i.unpack(str[start:end])
        start = end
        end += 4
        (val1.id,) = _struct_i.unpack(str[start:end])
        self.users.append(val1)
      _x = self
      start = end
      end += 12
      (_x.z, _x.x, _x.tracked,) = _struct_3i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.count))
      length = len(self.users)
      buff.write(_struct_I.pack(length))
      for val1 in self.users:
        _v13 = val1.Head
        _x = _v13
        buff.write(_struct_6i.pack(_x.x, _x.y, _x.z, _x.img_x, _x.img_y, _x.mode))
        _v14 = val1.Torso
        _x = _v14
        buff.write(_struct_6i.pack(_x.x, _x.y, _x.z, _x.img_x, _x.img_y, _x.mode))
        _v15 = val1.RightHand
        _x = _v15
        buff.write(_struct_6i.pack(_x.x, _x.y, _x.z, _x.img_x, _x.img_y, _x.mode))
        _v16 = val1.LeftHand
        _x = _v16
        buff.write(_struct_6i.pack(_x.x, _x.y, _x.z, _x.img_x, _x.img_y, _x.mode))
        _v17 = val1.LeftFoot
        _x = _v17
        buff.write(_struct_6i.pack(_x.x, _x.y, _x.z, _x.img_x, _x.img_y, _x.mode))
        _v18 = val1.RightFoot
        _x = _v18
        buff.write(_struct_6i.pack(_x.x, _x.y, _x.z, _x.img_x, _x.img_y, _x.mode))
        buff.write(_struct_i.pack(val1.id))
      _x = self
      buff.write(_struct_3i.pack(_x.z, _x.x, _x.tracked))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.users is None:
        self.users = None
      end = 0
      start = end
      end += 4
      (self.count,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.users = []
      for i in range(0, length):
        val1 = upperbodycore_msgs.msg.user()
        _v19 = val1.Head
        _x = _v19
        start = end
        end += 24
        (_x.x, _x.y, _x.z, _x.img_x, _x.img_y, _x.mode,) = _struct_6i.unpack(str[start:end])
        _v20 = val1.Torso
        _x = _v20
        start = end
        end += 24
        (_x.x, _x.y, _x.z, _x.img_x, _x.img_y, _x.mode,) = _struct_6i.unpack(str[start:end])
        _v21 = val1.RightHand
        _x = _v21
        start = end
        end += 24
        (_x.x, _x.y, _x.z, _x.img_x, _x.img_y, _x.mode,) = _struct_6i.unpack(str[start:end])
        _v22 = val1.LeftHand
        _x = _v22
        start = end
        end += 24
        (_x.x, _x.y, _x.z, _x.img_x, _x.img_y, _x.mode,) = _struct_6i.unpack(str[start:end])
        _v23 = val1.LeftFoot
        _x = _v23
        start = end
        end += 24
        (_x.x, _x.y, _x.z, _x.img_x, _x.img_y, _x.mode,) = _struct_6i.unpack(str[start:end])
        _v24 = val1.RightFoot
        _x = _v24
        start = end
        end += 24
        (_x.x, _x.y, _x.z, _x.img_x, _x.img_y, _x.mode,) = _struct_6i.unpack(str[start:end])
        start = end
        end += 4
        (val1.id,) = _struct_i.unpack(str[start:end])
        self.users.append(val1)
      _x = self
      start = end
      end += 12
      (_x.z, _x.x, _x.tracked,) = _struct_3i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_6i = struct.Struct("<6i")
_struct_3i = struct.Struct("<3i")
