"""autogenerated by genpy from upperbodycore_msgs/motorfeedback.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class motorfeedback(genpy.Message):
  _md5sum = "3fa1a6c5741529320c70030be633d3f4"
  _type = "upperbodycore_msgs/motorfeedback"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 speed
int32 position
float64 load
int32 voltage
int32 temp
int32 id
string name
string status
int32 min
int32 max
int32 init

"""
  __slots__ = ['speed','position','load','voltage','temp','id','name','status','min','max','init']
  _slot_types = ['int32','int32','float64','int32','int32','int32','string','string','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       speed,position,load,voltage,temp,id,name,status,min,max,init

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(motorfeedback, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.speed is None:
        self.speed = 0
      if self.position is None:
        self.position = 0
      if self.load is None:
        self.load = 0.
      if self.voltage is None:
        self.voltage = 0
      if self.temp is None:
        self.temp = 0
      if self.id is None:
        self.id = 0
      if self.name is None:
        self.name = ''
      if self.status is None:
        self.status = ''
      if self.min is None:
        self.min = 0
      if self.max is None:
        self.max = 0
      if self.init is None:
        self.init = 0
    else:
      self.speed = 0
      self.position = 0
      self.load = 0.
      self.voltage = 0
      self.temp = 0
      self.id = 0
      self.name = ''
      self.status = ''
      self.min = 0
      self.max = 0
      self.init = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2id3i.pack(_x.speed, _x.position, _x.load, _x.voltage, _x.temp, _x.id))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3i.pack(_x.min, _x.max, _x.init))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.speed, _x.position, _x.load, _x.voltage, _x.temp, _x.id,) = _struct_2id3i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8')
      else:
        self.status = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.min, _x.max, _x.init,) = _struct_3i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2id3i.pack(_x.speed, _x.position, _x.load, _x.voltage, _x.temp, _x.id))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3i.pack(_x.min, _x.max, _x.init))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.speed, _x.position, _x.load, _x.voltage, _x.temp, _x.id,) = _struct_2id3i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8')
      else:
        self.status = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.min, _x.max, _x.init,) = _struct_3i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3i = struct.Struct("<3i")
_struct_2id3i = struct.Struct("<2id3i")
