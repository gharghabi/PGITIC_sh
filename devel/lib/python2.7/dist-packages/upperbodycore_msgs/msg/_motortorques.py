"""autogenerated by genpy from upperbodycore_msgs/motortorques.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class motortorques(genpy.Message):
  _md5sum = "9224f2acf292cd76e572f0c9f42dc756"
  _type = "upperbodycore_msgs/motortorques"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool w0_torque
bool w1_torque
bool w2_torque
bool zm_torque
bool right_shoulder_torque
bool left_shoulder_torque
bool right_elbow_torque
bool left_elbow_torque
bool right_wrist_torque
bool left_wrist_torque
bool right_hand_torque
bool left_hand_torque
bool right_grip0_torque
bool right_grip1_torque
bool left_grip_torque
bool headpan_torque
bool headtilt_torque



"""
  __slots__ = ['w0_torque','w1_torque','w2_torque','zm_torque','right_shoulder_torque','left_shoulder_torque','right_elbow_torque','left_elbow_torque','right_wrist_torque','left_wrist_torque','right_hand_torque','left_hand_torque','right_grip0_torque','right_grip1_torque','left_grip_torque','headpan_torque','headtilt_torque']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       w0_torque,w1_torque,w2_torque,zm_torque,right_shoulder_torque,left_shoulder_torque,right_elbow_torque,left_elbow_torque,right_wrist_torque,left_wrist_torque,right_hand_torque,left_hand_torque,right_grip0_torque,right_grip1_torque,left_grip_torque,headpan_torque,headtilt_torque

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(motortorques, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.w0_torque is None:
        self.w0_torque = False
      if self.w1_torque is None:
        self.w1_torque = False
      if self.w2_torque is None:
        self.w2_torque = False
      if self.zm_torque is None:
        self.zm_torque = False
      if self.right_shoulder_torque is None:
        self.right_shoulder_torque = False
      if self.left_shoulder_torque is None:
        self.left_shoulder_torque = False
      if self.right_elbow_torque is None:
        self.right_elbow_torque = False
      if self.left_elbow_torque is None:
        self.left_elbow_torque = False
      if self.right_wrist_torque is None:
        self.right_wrist_torque = False
      if self.left_wrist_torque is None:
        self.left_wrist_torque = False
      if self.right_hand_torque is None:
        self.right_hand_torque = False
      if self.left_hand_torque is None:
        self.left_hand_torque = False
      if self.right_grip0_torque is None:
        self.right_grip0_torque = False
      if self.right_grip1_torque is None:
        self.right_grip1_torque = False
      if self.left_grip_torque is None:
        self.left_grip_torque = False
      if self.headpan_torque is None:
        self.headpan_torque = False
      if self.headtilt_torque is None:
        self.headtilt_torque = False
    else:
      self.w0_torque = False
      self.w1_torque = False
      self.w2_torque = False
      self.zm_torque = False
      self.right_shoulder_torque = False
      self.left_shoulder_torque = False
      self.right_elbow_torque = False
      self.left_elbow_torque = False
      self.right_wrist_torque = False
      self.left_wrist_torque = False
      self.right_hand_torque = False
      self.left_hand_torque = False
      self.right_grip0_torque = False
      self.right_grip1_torque = False
      self.left_grip_torque = False
      self.headpan_torque = False
      self.headtilt_torque = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_17B.pack(_x.w0_torque, _x.w1_torque, _x.w2_torque, _x.zm_torque, _x.right_shoulder_torque, _x.left_shoulder_torque, _x.right_elbow_torque, _x.left_elbow_torque, _x.right_wrist_torque, _x.left_wrist_torque, _x.right_hand_torque, _x.left_hand_torque, _x.right_grip0_torque, _x.right_grip1_torque, _x.left_grip_torque, _x.headpan_torque, _x.headtilt_torque))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 17
      (_x.w0_torque, _x.w1_torque, _x.w2_torque, _x.zm_torque, _x.right_shoulder_torque, _x.left_shoulder_torque, _x.right_elbow_torque, _x.left_elbow_torque, _x.right_wrist_torque, _x.left_wrist_torque, _x.right_hand_torque, _x.left_hand_torque, _x.right_grip0_torque, _x.right_grip1_torque, _x.left_grip_torque, _x.headpan_torque, _x.headtilt_torque,) = _struct_17B.unpack(str[start:end])
      self.w0_torque = bool(self.w0_torque)
      self.w1_torque = bool(self.w1_torque)
      self.w2_torque = bool(self.w2_torque)
      self.zm_torque = bool(self.zm_torque)
      self.right_shoulder_torque = bool(self.right_shoulder_torque)
      self.left_shoulder_torque = bool(self.left_shoulder_torque)
      self.right_elbow_torque = bool(self.right_elbow_torque)
      self.left_elbow_torque = bool(self.left_elbow_torque)
      self.right_wrist_torque = bool(self.right_wrist_torque)
      self.left_wrist_torque = bool(self.left_wrist_torque)
      self.right_hand_torque = bool(self.right_hand_torque)
      self.left_hand_torque = bool(self.left_hand_torque)
      self.right_grip0_torque = bool(self.right_grip0_torque)
      self.right_grip1_torque = bool(self.right_grip1_torque)
      self.left_grip_torque = bool(self.left_grip_torque)
      self.headpan_torque = bool(self.headpan_torque)
      self.headtilt_torque = bool(self.headtilt_torque)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_17B.pack(_x.w0_torque, _x.w1_torque, _x.w2_torque, _x.zm_torque, _x.right_shoulder_torque, _x.left_shoulder_torque, _x.right_elbow_torque, _x.left_elbow_torque, _x.right_wrist_torque, _x.left_wrist_torque, _x.right_hand_torque, _x.left_hand_torque, _x.right_grip0_torque, _x.right_grip1_torque, _x.left_grip_torque, _x.headpan_torque, _x.headtilt_torque))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 17
      (_x.w0_torque, _x.w1_torque, _x.w2_torque, _x.zm_torque, _x.right_shoulder_torque, _x.left_shoulder_torque, _x.right_elbow_torque, _x.left_elbow_torque, _x.right_wrist_torque, _x.left_wrist_torque, _x.right_hand_torque, _x.left_hand_torque, _x.right_grip0_torque, _x.right_grip1_torque, _x.left_grip_torque, _x.headpan_torque, _x.headtilt_torque,) = _struct_17B.unpack(str[start:end])
      self.w0_torque = bool(self.w0_torque)
      self.w1_torque = bool(self.w1_torque)
      self.w2_torque = bool(self.w2_torque)
      self.zm_torque = bool(self.zm_torque)
      self.right_shoulder_torque = bool(self.right_shoulder_torque)
      self.left_shoulder_torque = bool(self.left_shoulder_torque)
      self.right_elbow_torque = bool(self.right_elbow_torque)
      self.left_elbow_torque = bool(self.left_elbow_torque)
      self.right_wrist_torque = bool(self.right_wrist_torque)
      self.left_wrist_torque = bool(self.left_wrist_torque)
      self.right_hand_torque = bool(self.right_hand_torque)
      self.left_hand_torque = bool(self.left_hand_torque)
      self.right_grip0_torque = bool(self.right_grip0_torque)
      self.right_grip1_torque = bool(self.right_grip1_torque)
      self.left_grip_torque = bool(self.left_grip_torque)
      self.headpan_torque = bool(self.headpan_torque)
      self.headtilt_torque = bool(self.headtilt_torque)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_17B = struct.Struct("<17B")
