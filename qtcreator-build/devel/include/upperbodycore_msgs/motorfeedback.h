/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /home/shaghayegh/catkin_ws/src/upperbodycore_msgs/msg/motorfeedback.msg
 *
 */


#ifndef UPPERBODYCORE_MSGS_MESSAGE_MOTORFEEDBACK_H
#define UPPERBODYCORE_MSGS_MESSAGE_MOTORFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace upperbodycore_msgs
{
template <class ContainerAllocator>
struct motorfeedback_
{
  typedef motorfeedback_<ContainerAllocator> Type;

  motorfeedback_()
    : speed(0)
    , position(0)
    , load(0.0)
    , voltage(0)
    , temp(0)
    , id(0)
    , name()
    , status()
    , min(0)
    , max(0)
    , init(0)  {
    }
  motorfeedback_(const ContainerAllocator& _alloc)
    : speed(0)
    , position(0)
    , load(0.0)
    , voltage(0)
    , temp(0)
    , id(0)
    , name(_alloc)
    , status(_alloc)
    , min(0)
    , max(0)
    , init(0)  {
    }



   typedef int32_t _speed_type;
  _speed_type speed;

   typedef int32_t _position_type;
  _position_type position;

   typedef double _load_type;
  _load_type load;

   typedef int32_t _voltage_type;
  _voltage_type voltage;

   typedef int32_t _temp_type;
  _temp_type temp;

   typedef int32_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  _status_type status;

   typedef int32_t _min_type;
  _min_type min;

   typedef int32_t _max_type;
  _max_type max;

   typedef int32_t _init_type;
  _init_type init;




  typedef boost::shared_ptr< ::upperbodycore_msgs::motorfeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::upperbodycore_msgs::motorfeedback_<ContainerAllocator> const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;

}; // struct motorfeedback_

typedef ::upperbodycore_msgs::motorfeedback_<std::allocator<void> > motorfeedback;

typedef boost::shared_ptr< ::upperbodycore_msgs::motorfeedback > motorfeedbackPtr;
typedef boost::shared_ptr< ::upperbodycore_msgs::motorfeedback const> motorfeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::upperbodycore_msgs::motorfeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::upperbodycore_msgs::motorfeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace upperbodycore_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'upperbodycore_msgs': ['/home/shaghayegh/catkin_ws/src/upperbodycore_msgs/msg', '/home/shaghayegh/catkin_ws/qtcreator-build/devel/share/upperbodycore_msgs/msg'], 'geometry_msgs': ['/opt/ros/hydro/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/hydro/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/hydro/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::upperbodycore_msgs::motorfeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::upperbodycore_msgs::motorfeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::upperbodycore_msgs::motorfeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::upperbodycore_msgs::motorfeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::upperbodycore_msgs::motorfeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::upperbodycore_msgs::motorfeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::upperbodycore_msgs::motorfeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3fa1a6c5741529320c70030be633d3f4";
  }

  static const char* value(const ::upperbodycore_msgs::motorfeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3fa1a6c574152932ULL;
  static const uint64_t static_value2 = 0x0c70030be633d3f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::upperbodycore_msgs::motorfeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "upperbodycore_msgs/motorfeedback";
  }

  static const char* value(const ::upperbodycore_msgs::motorfeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::upperbodycore_msgs::motorfeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 speed\n\
int32 position\n\
float64 load\n\
int32 voltage\n\
int32 temp\n\
int32 id\n\
string name\n\
string status\n\
int32 min\n\
int32 max\n\
int32 init\n\
";
  }

  static const char* value(const ::upperbodycore_msgs::motorfeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::upperbodycore_msgs::motorfeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed);
      stream.next(m.position);
      stream.next(m.load);
      stream.next(m.voltage);
      stream.next(m.temp);
      stream.next(m.id);
      stream.next(m.name);
      stream.next(m.status);
      stream.next(m.min);
      stream.next(m.max);
      stream.next(m.init);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct motorfeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::upperbodycore_msgs::motorfeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::upperbodycore_msgs::motorfeedback_<ContainerAllocator>& v)
  {
    s << indent << "speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.speed);
    s << indent << "position: ";
    Printer<int32_t>::stream(s, indent + "  ", v.position);
    s << indent << "load: ";
    Printer<double>::stream(s, indent + "  ", v.load);
    s << indent << "voltage: ";
    Printer<int32_t>::stream(s, indent + "  ", v.voltage);
    s << indent << "temp: ";
    Printer<int32_t>::stream(s, indent + "  ", v.temp);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
    s << indent << "min: ";
    Printer<int32_t>::stream(s, indent + "  ", v.min);
    s << indent << "max: ";
    Printer<int32_t>::stream(s, indent + "  ", v.max);
    s << indent << "init: ";
    Printer<int32_t>::stream(s, indent + "  ", v.init);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UPPERBODYCORE_MSGS_MESSAGE_MOTORFEEDBACK_H
