"""autogenerated by genpy from upperbodycore_msgs/FaceTrackingSrvRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FaceTrackingSrvRequest(genpy.Message):
  _md5sum = "54b750e016536a3288dfddd1ddd71fea"
  _type = "upperbodycore_msgs/FaceTrackingSrvRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool request_tr
bool nearest
bool id_tr_flag
int32 id_tr

"""
  __slots__ = ['request_tr','nearest','id_tr_flag','id_tr']
  _slot_types = ['bool','bool','bool','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       request_tr,nearest,id_tr_flag,id_tr

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FaceTrackingSrvRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.request_tr is None:
        self.request_tr = False
      if self.nearest is None:
        self.nearest = False
      if self.id_tr_flag is None:
        self.id_tr_flag = False
      if self.id_tr is None:
        self.id_tr = 0
    else:
      self.request_tr = False
      self.nearest = False
      self.id_tr_flag = False
      self.id_tr = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3Bi.pack(_x.request_tr, _x.nearest, _x.id_tr_flag, _x.id_tr))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.request_tr, _x.nearest, _x.id_tr_flag, _x.id_tr,) = _struct_3Bi.unpack(str[start:end])
      self.request_tr = bool(self.request_tr)
      self.nearest = bool(self.nearest)
      self.id_tr_flag = bool(self.id_tr_flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3Bi.pack(_x.request_tr, _x.nearest, _x.id_tr_flag, _x.id_tr))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.request_tr, _x.nearest, _x.id_tr_flag, _x.id_tr,) = _struct_3Bi.unpack(str[start:end])
      self.request_tr = bool(self.request_tr)
      self.nearest = bool(self.nearest)
      self.id_tr_flag = bool(self.id_tr_flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3Bi = struct.Struct("<3Bi")
"""autogenerated by genpy from upperbodycore_msgs/FaceTrackingSrvResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FaceTrackingSrvResponse(genpy.Message):
  _md5sum = "5ff8b9757a50aec5a162141b00470d4b"
  _type = "upperbodycore_msgs/FaceTrackingSrvResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool resule


"""
  __slots__ = ['resule']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       resule

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FaceTrackingSrvResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.resule is None:
        self.resule = False
    else:
      self.resule = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.resule))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.resule,) = _struct_B.unpack(str[start:end])
      self.resule = bool(self.resule)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.resule))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.resule,) = _struct_B.unpack(str[start:end])
      self.resule = bool(self.resule)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
class FaceTrackingSrv(object):
  _type          = 'upperbodycore_msgs/FaceTrackingSrv'
  _md5sum = '839fae58f33f4317a0f5824a6118c798'
  _request_class  = FaceTrackingSrvRequest
  _response_class = FaceTrackingSrvResponse
