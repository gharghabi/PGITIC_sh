"""autogenerated by genpy from upperbodycore_msgs/upperbodymotors.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class upperbodymotors(genpy.Message):
  _md5sum = "fffca84754f6d1b715c73f8c10cb67a1"
  _type = "upperbodycore_msgs/upperbodymotors"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 shoulder_yawm_position
int32 shoulder_pitchm_position
int32 shoulder_roll_position
int32 elbow_pitch_position
int32 elbow_roll_position
int32 wrist_pitch_position
int32 wrist_roll_position
int32 gripper_position
int32 shoulder_yawm_speed
int32 shoulder_pitchm_speed
int32 shoulder_roll_speed
int32 elbow_pitch_speed
int32 elbow_roll_speed
int32 wrist_pitch_speed
int32 wrist_roll_speed
int32 gripper_speed
int32 head_yaw_position
int32 head_yaw_speed
int32 head_pitch_position
int32 head_pitch_speed

"""
  __slots__ = ['shoulder_yawm_position','shoulder_pitchm_position','shoulder_roll_position','elbow_pitch_position','elbow_roll_position','wrist_pitch_position','wrist_roll_position','gripper_position','shoulder_yawm_speed','shoulder_pitchm_speed','shoulder_roll_speed','elbow_pitch_speed','elbow_roll_speed','wrist_pitch_speed','wrist_roll_speed','gripper_speed','head_yaw_position','head_yaw_speed','head_pitch_position','head_pitch_speed']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       shoulder_yawm_position,shoulder_pitchm_position,shoulder_roll_position,elbow_pitch_position,elbow_roll_position,wrist_pitch_position,wrist_roll_position,gripper_position,shoulder_yawm_speed,shoulder_pitchm_speed,shoulder_roll_speed,elbow_pitch_speed,elbow_roll_speed,wrist_pitch_speed,wrist_roll_speed,gripper_speed,head_yaw_position,head_yaw_speed,head_pitch_position,head_pitch_speed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(upperbodymotors, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.shoulder_yawm_position is None:
        self.shoulder_yawm_position = 0
      if self.shoulder_pitchm_position is None:
        self.shoulder_pitchm_position = 0
      if self.shoulder_roll_position is None:
        self.shoulder_roll_position = 0
      if self.elbow_pitch_position is None:
        self.elbow_pitch_position = 0
      if self.elbow_roll_position is None:
        self.elbow_roll_position = 0
      if self.wrist_pitch_position is None:
        self.wrist_pitch_position = 0
      if self.wrist_roll_position is None:
        self.wrist_roll_position = 0
      if self.gripper_position is None:
        self.gripper_position = 0
      if self.shoulder_yawm_speed is None:
        self.shoulder_yawm_speed = 0
      if self.shoulder_pitchm_speed is None:
        self.shoulder_pitchm_speed = 0
      if self.shoulder_roll_speed is None:
        self.shoulder_roll_speed = 0
      if self.elbow_pitch_speed is None:
        self.elbow_pitch_speed = 0
      if self.elbow_roll_speed is None:
        self.elbow_roll_speed = 0
      if self.wrist_pitch_speed is None:
        self.wrist_pitch_speed = 0
      if self.wrist_roll_speed is None:
        self.wrist_roll_speed = 0
      if self.gripper_speed is None:
        self.gripper_speed = 0
      if self.head_yaw_position is None:
        self.head_yaw_position = 0
      if self.head_yaw_speed is None:
        self.head_yaw_speed = 0
      if self.head_pitch_position is None:
        self.head_pitch_position = 0
      if self.head_pitch_speed is None:
        self.head_pitch_speed = 0
    else:
      self.shoulder_yawm_position = 0
      self.shoulder_pitchm_position = 0
      self.shoulder_roll_position = 0
      self.elbow_pitch_position = 0
      self.elbow_roll_position = 0
      self.wrist_pitch_position = 0
      self.wrist_roll_position = 0
      self.gripper_position = 0
      self.shoulder_yawm_speed = 0
      self.shoulder_pitchm_speed = 0
      self.shoulder_roll_speed = 0
      self.elbow_pitch_speed = 0
      self.elbow_roll_speed = 0
      self.wrist_pitch_speed = 0
      self.wrist_roll_speed = 0
      self.gripper_speed = 0
      self.head_yaw_position = 0
      self.head_yaw_speed = 0
      self.head_pitch_position = 0
      self.head_pitch_speed = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_20i.pack(_x.shoulder_yawm_position, _x.shoulder_pitchm_position, _x.shoulder_roll_position, _x.elbow_pitch_position, _x.elbow_roll_position, _x.wrist_pitch_position, _x.wrist_roll_position, _x.gripper_position, _x.shoulder_yawm_speed, _x.shoulder_pitchm_speed, _x.shoulder_roll_speed, _x.elbow_pitch_speed, _x.elbow_roll_speed, _x.wrist_pitch_speed, _x.wrist_roll_speed, _x.gripper_speed, _x.head_yaw_position, _x.head_yaw_speed, _x.head_pitch_position, _x.head_pitch_speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 80
      (_x.shoulder_yawm_position, _x.shoulder_pitchm_position, _x.shoulder_roll_position, _x.elbow_pitch_position, _x.elbow_roll_position, _x.wrist_pitch_position, _x.wrist_roll_position, _x.gripper_position, _x.shoulder_yawm_speed, _x.shoulder_pitchm_speed, _x.shoulder_roll_speed, _x.elbow_pitch_speed, _x.elbow_roll_speed, _x.wrist_pitch_speed, _x.wrist_roll_speed, _x.gripper_speed, _x.head_yaw_position, _x.head_yaw_speed, _x.head_pitch_position, _x.head_pitch_speed,) = _struct_20i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_20i.pack(_x.shoulder_yawm_position, _x.shoulder_pitchm_position, _x.shoulder_roll_position, _x.elbow_pitch_position, _x.elbow_roll_position, _x.wrist_pitch_position, _x.wrist_roll_position, _x.gripper_position, _x.shoulder_yawm_speed, _x.shoulder_pitchm_speed, _x.shoulder_roll_speed, _x.elbow_pitch_speed, _x.elbow_roll_speed, _x.wrist_pitch_speed, _x.wrist_roll_speed, _x.gripper_speed, _x.head_yaw_position, _x.head_yaw_speed, _x.head_pitch_position, _x.head_pitch_speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 80
      (_x.shoulder_yawm_position, _x.shoulder_pitchm_position, _x.shoulder_roll_position, _x.elbow_pitch_position, _x.elbow_roll_position, _x.wrist_pitch_position, _x.wrist_roll_position, _x.gripper_position, _x.shoulder_yawm_speed, _x.shoulder_pitchm_speed, _x.shoulder_roll_speed, _x.elbow_pitch_speed, _x.elbow_roll_speed, _x.wrist_pitch_speed, _x.wrist_roll_speed, _x.gripper_speed, _x.head_yaw_position, _x.head_yaw_speed, _x.head_pitch_position, _x.head_pitch_speed,) = _struct_20i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_20i = struct.Struct("<20i")
