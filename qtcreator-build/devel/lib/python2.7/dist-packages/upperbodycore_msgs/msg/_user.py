"""autogenerated by genpy from upperbodycore_msgs/user.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import upperbodycore_msgs.msg

class user(genpy.Message):
  _md5sum = "3118245be98de8d397dad1fbd4d66719"
  _type = "upperbodycore_msgs/user"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """joint Head
joint Torso
joint RightHand
joint LeftHand
joint LeftFoot
joint RightFoot
int32 id

================================================================================
MSG: upperbodycore_msgs/joint
int32 x
int32 y
int32 z
int32 img_x
int32 img_y
int32 mode

"""
  __slots__ = ['Head','Torso','RightHand','LeftHand','LeftFoot','RightFoot','id']
  _slot_types = ['upperbodycore_msgs/joint','upperbodycore_msgs/joint','upperbodycore_msgs/joint','upperbodycore_msgs/joint','upperbodycore_msgs/joint','upperbodycore_msgs/joint','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Head,Torso,RightHand,LeftHand,LeftFoot,RightFoot,id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(user, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Head is None:
        self.Head = upperbodycore_msgs.msg.joint()
      if self.Torso is None:
        self.Torso = upperbodycore_msgs.msg.joint()
      if self.RightHand is None:
        self.RightHand = upperbodycore_msgs.msg.joint()
      if self.LeftHand is None:
        self.LeftHand = upperbodycore_msgs.msg.joint()
      if self.LeftFoot is None:
        self.LeftFoot = upperbodycore_msgs.msg.joint()
      if self.RightFoot is None:
        self.RightFoot = upperbodycore_msgs.msg.joint()
      if self.id is None:
        self.id = 0
    else:
      self.Head = upperbodycore_msgs.msg.joint()
      self.Torso = upperbodycore_msgs.msg.joint()
      self.RightHand = upperbodycore_msgs.msg.joint()
      self.LeftHand = upperbodycore_msgs.msg.joint()
      self.LeftFoot = upperbodycore_msgs.msg.joint()
      self.RightFoot = upperbodycore_msgs.msg.joint()
      self.id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_37i.pack(_x.Head.x, _x.Head.y, _x.Head.z, _x.Head.img_x, _x.Head.img_y, _x.Head.mode, _x.Torso.x, _x.Torso.y, _x.Torso.z, _x.Torso.img_x, _x.Torso.img_y, _x.Torso.mode, _x.RightHand.x, _x.RightHand.y, _x.RightHand.z, _x.RightHand.img_x, _x.RightHand.img_y, _x.RightHand.mode, _x.LeftHand.x, _x.LeftHand.y, _x.LeftHand.z, _x.LeftHand.img_x, _x.LeftHand.img_y, _x.LeftHand.mode, _x.LeftFoot.x, _x.LeftFoot.y, _x.LeftFoot.z, _x.LeftFoot.img_x, _x.LeftFoot.img_y, _x.LeftFoot.mode, _x.RightFoot.x, _x.RightFoot.y, _x.RightFoot.z, _x.RightFoot.img_x, _x.RightFoot.img_y, _x.RightFoot.mode, _x.id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.Head is None:
        self.Head = upperbodycore_msgs.msg.joint()
      if self.Torso is None:
        self.Torso = upperbodycore_msgs.msg.joint()
      if self.RightHand is None:
        self.RightHand = upperbodycore_msgs.msg.joint()
      if self.LeftHand is None:
        self.LeftHand = upperbodycore_msgs.msg.joint()
      if self.LeftFoot is None:
        self.LeftFoot = upperbodycore_msgs.msg.joint()
      if self.RightFoot is None:
        self.RightFoot = upperbodycore_msgs.msg.joint()
      end = 0
      _x = self
      start = end
      end += 148
      (_x.Head.x, _x.Head.y, _x.Head.z, _x.Head.img_x, _x.Head.img_y, _x.Head.mode, _x.Torso.x, _x.Torso.y, _x.Torso.z, _x.Torso.img_x, _x.Torso.img_y, _x.Torso.mode, _x.RightHand.x, _x.RightHand.y, _x.RightHand.z, _x.RightHand.img_x, _x.RightHand.img_y, _x.RightHand.mode, _x.LeftHand.x, _x.LeftHand.y, _x.LeftHand.z, _x.LeftHand.img_x, _x.LeftHand.img_y, _x.LeftHand.mode, _x.LeftFoot.x, _x.LeftFoot.y, _x.LeftFoot.z, _x.LeftFoot.img_x, _x.LeftFoot.img_y, _x.LeftFoot.mode, _x.RightFoot.x, _x.RightFoot.y, _x.RightFoot.z, _x.RightFoot.img_x, _x.RightFoot.img_y, _x.RightFoot.mode, _x.id,) = _struct_37i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_37i.pack(_x.Head.x, _x.Head.y, _x.Head.z, _x.Head.img_x, _x.Head.img_y, _x.Head.mode, _x.Torso.x, _x.Torso.y, _x.Torso.z, _x.Torso.img_x, _x.Torso.img_y, _x.Torso.mode, _x.RightHand.x, _x.RightHand.y, _x.RightHand.z, _x.RightHand.img_x, _x.RightHand.img_y, _x.RightHand.mode, _x.LeftHand.x, _x.LeftHand.y, _x.LeftHand.z, _x.LeftHand.img_x, _x.LeftHand.img_y, _x.LeftHand.mode, _x.LeftFoot.x, _x.LeftFoot.y, _x.LeftFoot.z, _x.LeftFoot.img_x, _x.LeftFoot.img_y, _x.LeftFoot.mode, _x.RightFoot.x, _x.RightFoot.y, _x.RightFoot.z, _x.RightFoot.img_x, _x.RightFoot.img_y, _x.RightFoot.mode, _x.id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.Head is None:
        self.Head = upperbodycore_msgs.msg.joint()
      if self.Torso is None:
        self.Torso = upperbodycore_msgs.msg.joint()
      if self.RightHand is None:
        self.RightHand = upperbodycore_msgs.msg.joint()
      if self.LeftHand is None:
        self.LeftHand = upperbodycore_msgs.msg.joint()
      if self.LeftFoot is None:
        self.LeftFoot = upperbodycore_msgs.msg.joint()
      if self.RightFoot is None:
        self.RightFoot = upperbodycore_msgs.msg.joint()
      end = 0
      _x = self
      start = end
      end += 148
      (_x.Head.x, _x.Head.y, _x.Head.z, _x.Head.img_x, _x.Head.img_y, _x.Head.mode, _x.Torso.x, _x.Torso.y, _x.Torso.z, _x.Torso.img_x, _x.Torso.img_y, _x.Torso.mode, _x.RightHand.x, _x.RightHand.y, _x.RightHand.z, _x.RightHand.img_x, _x.RightHand.img_y, _x.RightHand.mode, _x.LeftHand.x, _x.LeftHand.y, _x.LeftHand.z, _x.LeftHand.img_x, _x.LeftHand.img_y, _x.LeftHand.mode, _x.LeftFoot.x, _x.LeftFoot.y, _x.LeftFoot.z, _x.LeftFoot.img_x, _x.LeftFoot.img_y, _x.LeftFoot.mode, _x.RightFoot.x, _x.RightFoot.y, _x.RightFoot.z, _x.RightFoot.img_x, _x.RightFoot.img_y, _x.RightFoot.mode, _x.id,) = _struct_37i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_37i = struct.Struct("<37i")
